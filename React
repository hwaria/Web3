생활코딩 – React: 
재사용 가능한 사용자 정의 태그(컴포넌트)를 만들기, single page application 구현하기

1.	수업 소개
-	클래스 기반의 객체지향 프로그래밍 스타일로 코드 작성할 거임
-	페이스북에서 만든 자바스크립트 UI를 더 잘 만들기 위해 만든 UI 라이브러리
-	복잡하고 긴 코드를 따로 파일로 빼서 사용자 정의 태그 (리액트에서는 “컴포넌트”라고 함)로 묶어서 정의 후 그것들을 index.html 파일로 연결시켜준다면 훨씬 더 가독성이 좋고 복잡하지 않은 html태그를 만들 수 있겠다
-	그리고 위에서 만든 컴포넌트를 다른 웹페이지에서 다시 사용함으로써 코드의 재사용이 가능 
: 코드 수정이 필요할때, 컴포넌트에서 수정시 컴포턴트가 사용된 모든 웹페이지에서 수정이 동시에 적용됨
-	수업에서 다룰 내용
1)	리액트를 사용하는 이유
2)	리액트의 컴포넌트를 만드는 법
3)	리액트와 불변(immutable)의 관계
-	수업에서 다루지 않을 내용
1)	데이터베이스
2)	서버와 연동
3)	redux

2.	개발환경: 수업의 방향성과 개발환경을 마련 
-	본질적인 것 세 가지를 배움
1)	코딩: 개발환경을 세팅하고 어디에 코딩을 바꿔야 할지 살펴봄
2)	실행: 작성한 것을 실행해서 결과를 봄
3)	Deploy: 모든 작업이 끝난 후 최종적으로 소비자에게 제공

2-2. 개발환경의 종류
-	온라인 상에서 리액트 애플리케이션 구현 가능: codesandbox, codepen
-	이미 만들어진 웹사이트에 부분적으로 리액트 기능을 추가
-	리액트로 앱 개발: toolchain 리액트앱 개발을 위한 환경도구들이 자동으로 설정되어있는 기능, 그 중 “create react app” 사용 – npm을 사용해서 컴퓨터에 설치- 터미널 – npm 설치 – creare-react-app 설치

2-3. create-react-app을 이용해서 개발환경 구축
-	데스크탑 react-env 폴더 생성후 터미널에서 폴더로 이동 – 앱 설치
-	Npx create-react-app은 일회용으로 설치 후 사용, 삭제까지 해줌 -> 항상 최신 버전으로 사용가능하므로 실무에서 자주 사용하나봄

2-4. 샘플 웹앱 실행: 코딩
-	아이디가 루트인 div태그 안에다 코드 쓰기
<div id="root"></div>
-	루트 안에 들어가는 컴포넌트들은 ‘src’라는 디렉토리 안의 파일에서 생성
-	Index.js파일에서 document.getElementById(‘root’)를 통해 코드 실행
-	ReactDOM. Render(<App />: App.js파일에서 작성된 사용자 정의태그 
: className=”App”안의 코드를 지우고 안에 우리가 쓰고 싶은 코드를 작성하면 웹브라우저를 자동으로 리로드해줌 **return 다음에는 꼭 하나의 태그 안쪽에 나머지 태그들이 있어야함 

2-5. CSS 코딩하는 법
-	Index.js에서 css파일 연결하기: import ‘./index.css’

2-6. 배포하는 법(deploy)
-	React create react app파일(개발환경에 있는 파일)은 무게가 무거움 – 여러가지 기능이 추가되어있거든
-	Npm run build -> “build”라는 디렉토리가 생김. 그 안에 Index.html은 create react app이 실제 프로덕션 환경에서 사용되는 앱을 만들기 위해서 불필요한 공백 등을 모두 없앤 파일. 용량이 작음
: 실제로 서비스 할 때는 “build” 폴더 내 파일을 사용
-	명령 serve: npm을 통해 설치할 수 있는 간단한 웹서버 ‘serve’  
-	Npx serve -s build (서브를 설치한 후 실행 시 build 디렉토리를 루트로 하겠다는 뜻 -> 주소를 알려줌

3.	컴포넌트 제작: react의 핵심 기능인 컴포넌트 제작 방법 배우기
-	리액트가 없으면 어떤 상황일까? 리액트를 쓰지 않는 순수 html파일 만들어보기
: semantic 태그 사용- htlm5에 새로 추가된 기능, 기능상의 변화는 없으나 의미를 명확히 전달 위해 사용

3-2. 컴포넌트 만들기 1
-	컴포넌트를 만드는 태그(템플릿)
Class App extends Component {
	Render() {
		Return (
			<div className=”App”>
				Hello, React!!
			</div>
		);
}
: 리액트가 가지고 있는 클래스 “컴포넌트”를 상속받아서 App이라는 새로운 클래스를 만들고, 그것은 render라는 메소드를 가지고 있다
-	“Subject”라는 이름의 클래스만들어보기: 이 것은 유사자바스크립트 -> create react app이 js코드로 변경해줌
Class Subject extends Component {. // 클래스의 이름 첫 글자는 대문여야함
Render () {
  Return (
<header>  // 컴포넌트를 만들 때는 컴퍼넌트는 반드시 하나의 최상위 태그로 시작해야함 여기서는 헤더태그 
  <h1>WEB</h1>
  	  World wide web!
</header>.        // 우리가 떼어내고 싶은 긴 헤더태그 붙여넣기
    );
}
}
: App.js파일에서 <div className =”App”>	 내에 위에서 정의한 “Subject”클래스 넣어줌: <Subject></Subject> 

: 리액트는 웹브라우저가 알아들을 수 있는 Subject코드를 <header>코드로 변환해서 바꿔줌

3-3. 컴포넌트 만들기 2
-	<Nav>태그를 컴포넌트화하기
Class TOC extends Component {
Render() {
	Return (
		<nav>
      <ul>
        <li><a href="1.html">HTML</a></li>
        <li><a href="2.html">CSS</a></li>
        <li><a href="3.html">JavaScript</a></li>
      </ul>
   		 </nav>
	);
}
: App.js파일에서 <div className =”App”>	내 3-2에서 붙인 <Subject></Subject> 코드 밑에 <TOC></TOC> 
: 마찬가지로 <Article>태그도 “Content”클래스로 만들어서 위의 코드 밑에 붙임
-	복잡한 html코드를 정리해서 컴포넌트화하여 컴포넌트의 이름에만 집중할 수 있도록 하여 복잡성을 획기적으로 낮춤

class App extends Component {
  render() {
    return (
      <div className="App">
        <Subject></Subject>
        <TOC></TOC>
        <Content></Content>
      </div>
    );
}

3-4. props (properties): 
-	위에서 정의한 <Subject>~<Content> 컴포넌트를 다른 웹페이지에서도 사용, 혹은 패키지로 만들어서 인터넷에 업로드하면 다른 사람이 이것들을 사용할 수 도 있음
-	태그를 사용시 항상 똑같은 결과만 나오는 것이 아쉽다? 태그의 이름과 속성 특성을 사용해서 태그를 사용자화하기
class App extends Component {
  render() {
    return (
      <div className="App">
        <Subject title=”WEB” sub=”world wide web!”></Subject> // 속성값 부여하기
	<TOC></TOC>
	<Content></Content>
</div>
**공식문서에서 발췌
How to define a component:
Class Welcome extends React.Component {
Render () {
Return <h1> Hello, {this.props.name}.</h1>;
}
}
: 이것을 참고해서 전에 정의한 “Subject” 클래스 수정해보기
class Subject extends Component {
  render() {
    return (
      <header>
        <h1>WEB  {this.props.title}</h1>
        world wide web! {this.props.sub}
      </header>
    );
  }
}
: 이렇게 하면 “Subject”태그를 쓸 때 title값과 sub값만 바꿔주면 바뀐 내용으로 코드가 웹브라우저에 표현됨
-	<Content>도 바꿔보기: <Content title=”HTML” desc=”HTML is HyperText Markup Language.”></Content>
Class Content extends Component{
Render () {
  Return (
<article>
	<h2>{this.props.title}</h2>
	{this.props.desc}
</article>
)
}
}
	똑같이 동작하지만 속성값을 사용하여 다른 결과를 만들어낼 수 있게 됐따!

3-5. React Developer Tools: 리액트의 컴포넌트를 쉽게 탐색할 수 있도록 돕는 도구
-	리액트 공홈 – Community – Tools: 리액트 개발에 필요한 여러가지 도구들이 정리 – Debugging: 현재 리액트로 만들어진 앱의 상태를 확인할 수 있음 – chrome: React Developers Tools 설치
-	개발자도구 – 검사 – elements – 리액트 상의 컴포넌트를 확인하고 싶으면 맨 마지막 탭 “React” 클릭하면
<App>
 <div className=”App”>
   <Subject> … 우리가 위에서 작성했던 리액트 클래스 등 확인 가능 

3-6. Component 파일로 분리하기
-	지금 App.js 파일에 우리가 정의한 4개의 컴포넌트가 있는데 이게 늘어서 엄청 많아지면? 
: 각각의 컴포넌트별로 별도의 파일로 쪼개보기
-	“components”라는 폴더를 만들고 컴포넌트별로 파일 만듦 “TOC.js” – App.js파일에 있는 class TOC정의 태그를 만든 새 파일로 옮기고 import React, { Component} from ‘react’; 태그도 맨 상단에 붙여줌: 리액트라고 하는 라이러리에서 컴포넌트라는 클래스를 사용하기위해 설정하는 것! – 맨 밑에 “TOC”태그에서 어떤 변수나 함수를 외부에서 사용하게 할 것인지 지정 export default TOC; : TOC라는 클래스를 도입해서 사용 가능 – App.js 파일에서 TOC클래스를 가져올 수 있도록 import TOC from “./components/TOC” 연결시켜 줌

4.	State
-	리액트는 컴포넌트를 외부에서 조작할 때는 props를, 내부적으로 상태를 관리할 때는 state를 사용
-	사용자의 입장과 그것을 구현하는 사람의 입장이 있음
: 사용자의 입장에서는 버튼, 화면 터치와 같은 유저 인터페이스를 통해 장치를 조작: props와 유사
: 내부적인 구현을 위해 필요한 내부적 조작 장치, 메커니즘이 필요: state와 유사, props값에 따라서 내부의 구현에 필요한 것
-	Component를 만들고, 기본적인 동작을 바꾸고 싶을 때 사용자에게 제공하는 props라는 문법을 사용, 컴포넌트를 조작 – 사용자는 알 필요 없는, 컴포넌트 내부적으로 사용되는 것들은 State
=> 컴포넌트가 좋은 부품이 되기 위해서는 컴포넌트를 사용하는 외부의 props와, 컴포넌트를 실제로 구현하는 내부의 state가 철저히 분리되어 있어야함
- 복잡하고 다양한 일들을 하는 컴포넌트를 만들 때 필수 요소인 State를 배워보자!

4-2. State 사용
class App extends Component {
  render() {
    return (
      <div className="App">
        <Subject title=”WEB” sub=”world wide web!”></Subject>
        <TOC></TOC>
        <Content title=”HTML” desc=”HTML is HyperText Markup Language.”></Content>
      </div>
    );
}
-	App이라는 상위 컴포넌트에 “Subject”라는 하위 컴포넌트가 있음. 그런데 하위 컴포넌트의 props값들이 하드코딩 되어있는 것이 보기 싫음 -> 이것들을 state값으로 만들고 그 값을 서브젝트에 props로 전달해서 개선해보자

class App extends Component {
constructor(props){  // state값을 초기화하기 위해 작성: 초기화해서 props로 들어가는 값을 세팅하려고
super(props); // 어떤 컴포넌트가 실행될 때, render함수보다 먼저 실행되어 컴포넌트를 초기화 시켜주고 싶은 코드는 constructor 안에 넣음!
This.state = {
Subject: { title: “WEB”, sub: “World Wide Web”} // Subject의 값을 state화하는 코드
} 
}
  render() {
    return (
      <div className="App">
        <Subject 
title= {WEB this.state.subject.title}  
sub= {”world wide web! This.state.subject.sub}>
</Subject>
        <TOC></TOC>
        <Content title=”HTML” desc=”HTML is HyperText Markup Language.”></Content>
      </div>
    );
}
: app.js파일을 사용하고 있는 indext.js 파일에서는 “ReactDOM..render<App />”이라는, 컴포넌트를 사용하는 코드는 보이지만 이 것이 state값인 subject라는 것이 있는지는 알 수 없음 (안에 전선이 잘 정리된 휴대폰같이!)
: App (상위 컴포넌트)의 state값을 하위 컴포넌트인 subject의 props값으로 전달하였음 

4-3. key
-	복수의 엘리먼트를 생성할 때는 key라는 특수한 props를 사용
-	TOC 안에 있는 데이터를 app의 내부 state로 설정하여 toc에 자동으로 들어가게 만들기
class App extends Component {
  constructor(props){
    super(props);
    this.state = {
      subject: {title:'WEB', sub:'World Wid Web!'},
      contents: [ // toc 목록 안의 데이터가 여러 개이므로 대괄호를 사용하여 배열 생성
{id: 1, title: ’HTML’, desc: ’HTML is for information’ }, // 배열의 첫 번째 값 객체, id값 부여
{id: 2, title: ’CSS’, desc: ’CSS is for design’ },
	{id: 3, title: ’JavaScript, desc: ’JavaScript is for interactive web’ },
]   
    }
  }
  render() {
    return (
      <div className="App">
        <Subject title="WEB" sub="world wide web!"></Subject>
        <Subject 
          title= {this.state.subject.title} 
          sub= {this.state.subject.sub}></Subject>
        <TOC data= {this.state.contents}></TOC>
        <Content title="HTML" desc="HTML is HyperText Markup Language."></Content>
      </div>

	이제 TOC.js 파일에서 TOC 클래스 정의 코드 수정
Class TOC extends Component {
Render() {
	Var lists = [ ];
	Var data = This.props.data; // toc가 내부적으로 가지고 있는 값
	Var I = 0;
	While (I < data.length) { // props 데이터값만큼 반복
    Lists.push(<li key={data[i].id}><a href={"/content/" + data[i].id}> {data[i].title} </a></li>); // <li>태그 안 내용을 배열로 넣음 ???content는 어디서 나오는거임? // <a href={data[i].id+".html"}> 대체 가능

I = I + 1;
} // 각각의 리스트의 항목들을 자동으로 생성하는 경우 콘솔창에서 에러가 뜸: key라는 props를 사용해라! -> <li>태그에 Key값 줌
	Return (
		<nav>
      <ul>
        <li><a href="1.html">HTML</a></li>
        <li><a href="2.html">CSS</a></li>
        <li><a href="3.html">JavaScript</a></li>
	    {lists}
      </ul>
   		 </nav>
	);
}
: 부모인 App의 입장에서는 State라고 하는 내부정보를 사용, 그것을 자식요소(subject, TOC)에 전달할때는 props ( {this.state.subject.title} )를 이용하여 전달 – 따라서 App에서는 토픽이 내부적으로 어떻게 돌아가는지 알 필요가 없고, TOC data로 어떤 형태의 정보를 전달하면 되는가, 즉 사용자의 입장에서 알아야 할 것만 알면 됨

5.	이벤트
-	사용자와 상호작용하는 애플리케이션의 핵심인 이벤트를 리액트에서 구현하기
-	이벤트, State, Props 같이 상호작용해서 애플리케이션의 역동성을 만듦
-	각각의 “WEB”, 링크에 이벤트 걸기 -> 클릭하면 app 컴포넌트의 state의 바뀌고, 바뀐 값이 컴퍼넌트의 props값으로 전달되게 해야함
-	우리가 보는 페이지가 웰컴 페이지인지 읽기 페이지인지 구분위해 state에 mode라는 값주기
This.state {
      mode:'welcome',
      subject: {title:'WEB', sub:'World Wid Web!'},
      welcome: {title:'Welcome', desc:'Hello, React!!'}, // 웰컴페이지일때 본문에 나타날 글
      contents: [
        {id:1, title:'HTML', desc:'HTML is for information'},
        	{id:2, title:'CSS', desc:'CSS is for design'},
		}}

-	리액트에서는 props값이나 state값이 바뀌면 그 값을 가지고있는 컴포넌트의 렌더함수가 다시 호출됨 -> 화면이 다시 그려짐 -> 모드에 따라 조건문 달기
render() {
    console.log('App render');
    var _title, _desc = null;
    if (this.state.mode ===  'welcome'){ // mode에 따라 rendering이 새로 되면 실행될 조건들 
      _title = this.state.welcome.title;
      _desc = this.state.welcome.desc;
    } else if (this.state.mode === 'read'){
      _title = this.state.contents[0].title;
      _desc = this.state.contents[0].desc;
    }
    return (
      <div className="App">
        <Subject 
          title={this.state.subject.title} 
          sub={this.state.subject.sub}>
        </Subject>
        <TOC data={this.state.contents}></TOC>
<Content title={_title} desc={_desc}></Content>
      </div>
    );
}  // 지금은 mode를 직접 손으로 바꿔줬었는데 이것을 자바스크립트 코드로 저절로 바뀌게 하려면?

5-2. 이벤트 설치
-	“WEB”을 클릭햇을 때 서브젝트 바깥쪽의 app의 State를 바꿀건데.. 일단은 서브젝트 안의 코드를 그대로 앱에 도입해서 구현하는 것을 해볼거임
-	일단 app.js 내의 Subject props를 주석 처리 한 후 subject파일내 <header>코드를 그대로 그 자리에 붙임 – {this~~} 코드내에 props 부분을 “this.state.subject.title / contents”로 수정
-	<header>태그내 <a>링크를 클릭했을 때 자바스크립트 이벤트가 일어나게 해야함: 
자바스크립트에서는 온클릭이벤트를 onclick = “”의 형태로 쓰지만 리액트에서는 유사자바스크립트 코드 jsx를 쓰므로 onClick = { } 의 포맷으로 씀!
<header>
   <h1>
       <a href="/" onClick={function(e) {
                alert("hi"); // 실행하면 경고창이 뜨고, 경고창 클릭하면 화면이 리로드됨 ->  a태그는 클릭하면 href 속성이 가리키는 페이지로 이동한다는 기본적인 동작 방법을 변경해줘야함!
              }}
	{this.state.subject.title} </a>
   </h1>
   {this.state.subject.sub}
</header>
: onclick이벤트로 함수가 실행되면 함수의 매개변수로 이벤트라는 객체를 주입함 
“e.preventDefault()” ; e (이벤트 객체)의 기본적인 동작 방법을 금지 -> 더이상 새로고침을 하지 않음


5-3. 이벤트에서 state변경하기
-	A태그를 클릭했을때 app이라는 컴퍼넌트의 모드값을 바꾸고 싶다!
<h1>
       <a href="/" onClick={function(e) {
   e.preventDefault();
   this.state.mode = ‘welcome’;
}}
{this.state.subject.title} </a>
</h1>
: this.state.mode 코드 추가하면 두 가지 문제가 생김!
1)	이벤트가 호출되었을때 실행되는 함수 안에서는 this의 값이 아무 값도 없음->
함수가 끝난 직후에 “.bind(this)” 추가 -> 5-4에서 더 자세히 보자
<a href="/" onClick={function(e) {
   e.preventDefault();
   this.state.mode = ‘welcome’;
}.bind(this)}>
{this.state.subject.title} </a>

2)	리액트에서는 state값을 바꿀때 “setState”함수를 쓰라고 함 -> 5-5에서 더 자세히 보자
<a href="/" onClick={function(e) {
   e.preventDefault();
   // this.state.mode = ‘welcome’;
	This.setState({
Mode: ‘welcome’
});
}.bind(this)}> {this.state.subject.title} </a>

5-4. 이벤트 Bind 함수 이해하기 
-	Render 함수가 호출될 때 bind(this)쓰면, console.log(‘render’, this) -> this는 render함수가 속해있는 컴포넌트 자신을 가리킴을 알 수 있음
-	Bind함수가 없으면 console.log(‘event in’, this) 를 쓰면 “undefined”로 뜸 
: 따라서 this값이 없다고 하면 bind(this)를 써서 컴포넌트를 가리키도록 만들면 된다~
-	Onclick의 익명함수에서 Bind(this) 코드를 쓰면, App이라는 컴포넌트 자체를 가리키는 객체를 익명함수 안으로 주입해서 this가 onclick 이벤트가 실행되는 대상을 가리키도록 함

5-5. 이벤트 setState 함수 이해하기 
-	Constructor 함수에서는 state값을 직접 바꿀 수 있지만, 이미 컴포넌트가 생성이 된 후에 동적으로 state값을 변경할 때는 setState 함수를 써야하는 것!

5-6. 컴포넌트 이벤트 만들기
-	이벤트를 생성해서 다른 사용자가 쓸 수 있도록 하기
-	위에서 만든 <header> 태그를 app.js파일에서 주석처리 하고 이 전에 주석처리 해놓은 서브젝트 컴포넌트 다시 활성화하기
: 다른 사용자가 Subject 컴포넌트를 사용할 때, 우리가 만든 이벤트를 호출할 수 있게 하려면? subject 컴포넌트에  “onChangePage” 라는 이벤트를 쓰라 하고, 이벤트에 함수를 추가해서 링크를 클릭했을 때 이벤트를 설치한 함수를 호출하게 함. -> subject클래스에서 onChangePage 함수를 실행하도록 추가

: App.js 파일에 있는 subject 컴포넌트
<div className="App"> 
        <Subject
          title={this.state.subject.title}
          sub={this.state.subject.sub}
          onChangePage={function() {
            this.setState({ mode: "welcome" });
          }.bind(this)}
        	/>

: 위에서 만든 onchangepage함수를 props의 형태로 subject.js 파일에 있는 a링크에 이벤트 추가
 class Subject extends Component {
  render() {
    return (
      <header>
        <h1>
          <a href="/" onClick={function(e){
            e.preventDefault();
            this.props.onChangePage(); // subject컴포넌트에서 props로 전달된 onchangepage 함수를 호출
          }.bind(this)}>{this.props.title}</a>
        </h1>
        {this.props.sub}
      </header>
    );
  }
}
-	이벤트의 소비자가 아닌 생성자가 되엇다.. 

5-7. 컴포넌트 이벤트 만들기 2
-	이전 시간에 onchangepage라는 이벤트를 생성하여 사용자에 제공 
-	이번에는 글 목록을 클릭했을 때 app 컴포넌트의 mode를 ‘read’로 바꾸고 클릭한 것에 해당하는 컨텐트가 본문에 나오도록 하기
:일단 app.js파일의 toc에 onChangePage라는 이벤트를 props로 전달 후, TOC파일에서 a태그에 함수를 호출하는 코드 추가 

-	App.js
<TOC
          onChangePage={function() {
           this.setState({mode: ‘read’})// 모드를 바꾸는 이벤트 함수
          }.bind(this)}
          data={this.state.contents}
        />

-	Toc.js
while (i < data.length) {
      lists.push(
        <li key={data[i].id}>
          <a
            href={"/content/" + data[i].id}
            onClick={function(e) {
              e.preventDefault();
              this.props.onChangePage();
            }.bind(this)}
          >
            {data[i].title}
          </a>
        </li>
      );
      i = i + 1;
    }

5-8. 컴포넌트 이벤트 만들기 3
-	이제 각각의 링크 누르면 해당되는 컨텐츠 나오게 하기
-	App의 state에 ‘selected content id’라는 값을 줘서 현재 활성화된 컨텐트를 화면에 표시 
1)	State값 추가 
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      mode: "welcome",
      selected_content_id: 2,
      subject: { title: "WEB", sub: "World Wide Web" },
      welcome: { title: "Welcome", desc: "Hello, React!!" },
      contents: [
        { id: 1, title: "HTML", desc: "HTML is for information" },
        { id: 2, title: "CSS", desc: "HTML is for design" },
        { id: 3, title: "JavaScript", desc: "HTML is for interactive" }
      ]
    };
}
2)	모드가 ‘read’일 때 “contents”state의 id값과 “selected_content_id”값과 일치하는지 확인 후 화면에 보일 _title, _desc 알맞게 보여주게 하기

} else if (this.state.mode === "read") {
      var i = 0;
      while (i < this.state.contents.length) { // 컨텐츠 state의 항목 수만큼 반복문 실행
        var data = this.state.contents[i];  // 현재 순번에 해당하는 컨텐츠
        if (data.id === this.state.selected_content_id) { // 데이터의 id값과 selected content id값과 일치한다면
          _title = data.title;
          _desc = data.desc;
          break; // 일치하는 id값을 찾은 경우 반복문 더 이상 실행될 필요 없으므로
        }
        i = i + 1;
      }
    }
3)	TOC에서 onChangePage 이벤트가 발생됐을 때 (a링크가 클릭되었을 때) ‘Selected_content_id’값을 바꿔줘야함
: toc.js파일에서 onClick 이벤트에 파라미터로 매개변수로 전달된 이벤트 객체 ‘e’의 ‘dataset.id’ 값 (e.target.dataset.id)을 사용
<a
            href={"/content/" + data[i].id}
            data-id={data[i].id} // 이벤트를 실행시킨 객체의 속성값을 활용 (data-id)로 Dataset에 접근 가능
            onClick={function(e) {
e.preventDefault();
             	this.props.onChangePage(e.target.dataset.id);
            }.bind(this)}
          >
            {data[i].title}
          </a>

App.js에서 onchangepage 이벤트 함수에 id값을 매개변수로 전달 후 “selected_content_id”값 바꾸기
<TOC
          onChangePage={function(id) { // id값 매개변수로 전달
            this.setState({
              mode: "read",
              selected_content_id: Number(id) // data-id로 들어오는 id값은 문자형이므로 숫자형으로 바꿔줌
            });
          }.bind(this)}
          data={this.state.contents}
        />
: 이제 web을 클릭하면 ‘welcome’모드로 되고, 각각의 페이지를 클릭하면 모드가 ‘read’로 그리고 해당되는 컨텐츠가 나옴 

6.	Create 기능 구현: 베이스 캠프
-	이때까지 만든 거 감상해보기: 페이지가 바뀌지 않고 컨텐츠가 역동적으로 바뀌는 웹사이트를 만들었음
-	개념 정리해보기
1) Props vs State
-  props are read-only & state can be modified using this.setState
: App.js에서 Content를 사용하는 입장에서는 title props를 통해 값을 바꿀 수 있지만, Content.js에서 content 컴포넌트에 전달된 title props을 바꿀 수는 없음,  둘 다 render 함수 호출을 유발하므로 Props나 state를 수정하며 UI를 바꿀 수 있음
-	상위 컴포넌트가 하위 컴포넌트로 값을 전달할 때는 Props를 통해서, 하위 컴포넌트가 상위 컴포넌트의 값을 바꾸고 싶을 때는 이벤트를 통해서 상위컴포넌트의 state를 변경!
-	Redux: 하나의 데이터 저장소가 있어서 데이터 저장소의 값이 바뀌면 그 값과 관련된 모든 컴포넌트가 변경됨 
-	앞으로 현실 애플리케이션 구현: 이때까지 만든 것은 읽기 기능만 됨. 앞으로 리액트를 이용해서 동적으로 데이터를 수정, 추가 등 할 것

6-2. Create 구현: 소개
-	정보 기술은 CRUD에 있따, CR이 핵심적인 오퍼레이션
C: create, 애플리케이션의 데이터를 생성할 것인가?
R: read
U: Update
D: Delete
-	앞으로 할 것: TOC와 Contents 사이에 생성, 수정, 삭제 버튼을 만들 것 -> 생성 버튼을 누르면 App의 모드가 “Create”로 바뀌고, <Content> 컴포넌트가 글을 추가할 때 쓰는 컴포넌트 “Create Content”로 바뀌고, 이 컴포넌트는 폼을 저장해서 폼의 정보를 입력해서 저장하면 컨텐츠의 목록에 새로운 정보가 추가될 것임  
-	폼 내부에는 글을 작성한 후 “Submit”버튼을 누르면 이벤트가 발생되서 App컴포넌트의 기존의 컨텐츠 배열 끝에 새로운 정보 추가되고 TOC에도 항목 추가됨
-	TOC의 링크를 클릭하면 다시 모드가 “read”로 바뀌고 “Read content”로 컴포넌트 변경됨

6-3. Create 구현: mode 변경
-	TOC 밑에 Create, Update, Delete 버튼 추가
<ul>
          <li><a href="/create">create</a></li>
          <li><a href="/update">update</a></li>
          <li><input type="button" value="delete"></input></li> // 삭제 기능의 버튼은 a링크가 아닌 input 타입을 써야함
</ul>
-	위 태그를 control.js 라는 새 파일에다 뺀 후 app.js파일에 연결 -> Control 컴포넌트에 onchangemode 함수를 정의해서 li태그가 클릭되었을때 이벤트 실행하도록 만듦
<Control
          onChangeMode={function(_mode) { // 각 링크가 클릭될 때 인자로 받은 _mode가 변수로 전달됨
            console.log(this.state.mode);
            this.setState({
              mode: _mode
            });
          }.bind(this)}
        />
-	각 li태그가 클릭 되었을 때 그에 해당되는 모드를 바꿔줄 수 있도록 설정

 
-	이제 모드가 알맞게 바뀌니 모드에 따라서 content가 표시되는 영역의 컴포넌트가 바뀌도록 해보자

6-4. mode 전환 기능
-	Create를 클릭했을 때 Create모드에서 사용될 Content컴포넌트를 “create content”로 바뀌게 하기 
-	기존의 컴포넌트 이름이였던 <Content>를 “ReadContent”로 이름 변경 후 연결된 파일에서도 이름 다 변경해주기 -> CreateContent 파일 따로 생성 후 안에 Form태그 추가, App.js 파일에 import 시켜줌 
-	Create모드가 되면 readcontent를 createcontent로 교체하는 코드 추가하기
: readcontent 영역이 가변적으로 바뀔 수 있게 하기 위해서 {_article} 변수로 만든 후 모드 조건문에서 모드에 따라 가변적으로 나타날 수 있도록 추가 -> create모드일때는 CreateContent가 나올 수 있도록 조건문에 추가
render() {
    // console.log("App render");
    var _title,
      _desc, _article = null; //기본적으로 없는 값
    if (this.state.mode === "welcome") {
      _title = this.state.welcome.title;
      _desc = this.state.welcome.desc;
      _article = <ReadContent title ={_title} desc={_desc} /> //이 영역을 가변적으로 만들기 위해 변수로 만들어 저장
    } else if (this.state.mode === "read") {
      var i = 0;
      while (i < this.state.contents.length) {
        var data = this.state.contents[i]; // 현재 순번에 해당하는 컨텐츠
        if (data.id === this.state.selected_content_id) {
          _title = data.title;
          _desc = data.desc;
          break;
        }
        i = i + 1;
      }
      _article = <ReadContent title ={_title} desc={_desc} /> // 모드가 웰컴이거나 리드면 있는 그대로 나옴
    } else if (this.state.mode === 'create') { //create 모드에서 article 내용 바뀜
      _article = <CreateContent />
    }

-	이제 createcontent의 form영역 구현해보쟈~~

6-5. Create 구현: form
-	Form 태그는 입력한 정보를 어디에 전송할 것인지를 action내에 정의, 사용자가 정보를 추가할 때는 method를 ‘post’방식 사용
-	Form에서 submit버튼이 클릭되엇을때 onsubmit이라는 이벤트를 추가해서 정보가 전송되도록 정의
<form action="/create_process" method="post"
          onSubmit={function(e) {
            e.preventDefault(); // 페이지 전환 안 되도록!
            alert("Submit!!");
          }.bind(this)}
        >
          <p>input type="text" name="title" placeholder="title" /></p>
          <p><textarea name="desc" placeholder="description" /></p> //여러 줄의 텍스트를 입력 시 textarea 사용 
          <p><input type="submit" /></p>
 </form>
-	페이지전환없이 경고창 잘 뜸! 
-	이제는 app이라는 컴포넌트에 contents 끝에 사용자가 입력한 정보 추가시키기 – 글 목록 자동으로 변경되게 하기

6-6. Create 구현: onSubmit 이벤트 
-	Submit 버튼이 클릭되었을 때 createcontent의 이벤트로 설치된 함수를 실행시켜야함
else if (this.state.mode === "create") {
      _article = <CreateContent onSubmit={function(_title, _desc){
        // setState를 통해서 App에 새로운 컨텐츠 값을 추가하는 코드
        console.log(_title, _desc); // 밑에서 전달해 준 인자가 제대로 나오는지 확인
      }.bind(this)} />;
    }

-	CreateContent에서 onsubmit함수를 호출하고 첫 번째 인자에는 title, 두 번째인자에는 desc을 줄 수 있어야함 (Form의 value값 가져오기) 
: e 이벤트 객체 -> target (Form 자체) -> title, value -> e.target.title.value & e.target.desc.value
onSubmit={function(e) {
            e.preventDefault(); // 페이지 전환 안 되도록!
            debugger;
            this.props.onSubmit(e.target.title.value, e.target.desc.value);
          }.bind(this)}
        >
- 이제 title, description 값을 잘 받아올 수 있게 되었으니 이 것들을 App의 컨텐츠 끝에 추가해주자~

6-7. Create 구현: Content 변경
-	Contents의 끝에 데이터를 추가해야되니까 기존에 있던 데이터의 id값을 쭉 읽어서 1 더 큰 id 값을 만들어야 함 -> 변수로 저장해두자 (ui에 영향을 주지는 않으므로 불필요한 렌더링을 피하기 위해 State가 아닌 바깥쪽에 뺌)
class App extends Component {
  constructor(props) {
    super(props);
    this.max_content_id = 3; // contents 마지막 요소 id값 저장해두기
    this.state = {
-	State 통해서 컨텐츠 값 추가 
else if (this.state.mode === "create") {
      _article = <CreateContent onSubmit={function(_title, _desc){
        // state를 통해서 새로운 컨텐츠 값을 추가하기
        this.max_content_id = this.max_content_id + 1; // 컨텐츠의 마지막 요소보다 id값 1 더 큼
        this.state.contents.push( //이런 식으로 state의 값을 직접 수정할수가 없음 -> setState 써야
{id: this.max_content_id, title: _title, desc: _desc}); // 항목 추가하기
        this.setState({ // 조건문에서만state 변경시 모름.. setState써서 컨텐츠가 수정되었음을 알림 
          contents: this.state.contents
        });
        console.log(_title, _desc);
      }.bind(this)} />;
    }
-	그런데 이렇게 하면 나중에 리액트 성능 개선할 때 까다로울 수 잇음: concat이라는 걸 사용하면 더 효율적..
: 배열에 항목을 추가할 때 push도 쓸 수 있지만 concat도 쓸수 있음. Push를 쓸 때는 원본을 바꿔서 새로운 항목이 추가된 새로운 배열을 돌려주지만, concat은 원래 배열은 그대로 두고 새로운 항목이 추가된 새로운 배열을 리턴함 -> State에 값을 추가할 때는 Push처럼 오리지널 데이터를 변경하는 함수를 쓰지 말고 CONCAT을 쓰는 것이 더 좋다 -> 원본 데이터를 바꾸지 않고 데이터를 state에 갱신함 
<CreateContent
          onSubmit={function(_title, _desc) {
            // state를 통해서 새로운 컨텐츠 값을 추가하기
            this.max_content_id = this.max_content_id + 1;
            // this.state.contents.push({id: this.max_content_id, title: _title, desc: _desc});
            var _contents = this.state.contents.concat({ // concat으로 만들어진 항목이 추가된 새로운 배열을 저장
              id: this.max_content_id,
              title: _title,
              desc: _desc
            });
            this.setState({
              contents: _contents
            });
            console.log(_title, _desc);
          }.bind(this)}
        />
-	이제 리액트를 이용해서 C, R, U, D 중 create, read 둘 다 할 수 있게 되었다

6-8. Create 구현: ShouldComponentUpdate 소개
-	setState에 어떤 수정된 값을 줄 때는 원본을 수정하지말고, 원본의 복제본을 수정해서 setState 값으로 주는 것이 좋음.. 왜? 
-	TOC의 컨텐츠는 바뀐 것이 없는데도 다른 a태그가 추가됨에 따라 다시 렌더링함수가 호출이 됨 -> 불합리. 프로그램 사이즈가 커지면 이슈가 될 수 있음: 리액트는 성능을 향상시키고 싶을 때 컴포넌트의 렌더함수가 실행될지, 않을지를 결정할 수 있도록 특수한 함수를 제공: shouldComponentUpdate() 함수, render 함수 위에 정의하고 Return값 (true / false) 에 따라 render 함수의 실행 여부를 결정할 수 있다: true이면 shouldComponentUpdate 함수 실행 후에 Render함수 실행, False면 render함수 실행되지 않음
-	ShouldComponentUpdate 함수는 두 개의 매개변수를 갖도록 약속되어 있음: NewProps, newState
class TOC extends Component {
  shouldComponentUpdate(newProps, newState) {
    console.log("===> TOC render shoudComponentUpdate",
    newProps.data,   // create 버튼을 통해 새로 추가된 데이터
    this.props.data); // 지금 현재 데이터
    return true;
  }

  render() {
: 만약 newProps 값과 this.props.data값이 다를 때만 true를 리턴한다면? 새로운 데이터가 있을 때만 render 함수 실행되므로 합리적임
그런데 이때 위에서 concat을 사용하지 않고 Push를 통해 state값을 바꿨다면 이 기능이 제대로 실행되지 않음: 원본 데이터가 바꼈으니까
class TOC extends Component {
  shouldComponentUpdate(newProps, newState) {
    console.log(
      "===> TOC render shoudComponentUpdate",
      newProps.data,
      this.props.data
    );
    if (this.props.data === newProps.data) {
      return false;
    }
    return true;
}
-	shouldComponentUpdate 함수를 쓸 필요가 없으면 push를 쓰던 concat을 쓰던 그닥 상관이 없겠다
-	다음 시간엔 원본을 바꾸지 않고 SetState에다가 값을 세팅하는 간단한 방법 살펴볼 것

6-9. Create 구현: Immutable (불변)
-	“원본을 바꾸지 않는다” => 불변성이라고 함, Immutable 
Var a = [1, 2];
Var b = Array.from(a);  // a와 같은 데이터를 가지고 있는 새로운 배열이 만들어 짐 
Console.log(a, b, a === b);  -> [1, 2], [1, 2], false // a와 b는 내용만 같을 뿐 다른 배열 -> concat을 쓰지 않고 새로운 정보가 추가된 contents의 배열을 복제한 후 push를 통해 state값을 변경하는 방법
<CreateContent
          onSubmit={function(_title, _desc) {
    this.max_content_id = this.max_content_id + 1;
 		// var _contents = this.state.contents.concat({ 
              id: this.max_content_id,
              title: _title,
              desc: _desc //
		var newContents = Array.from(this.state.contents);
		newContents.push({id: this.max_content_id,
              title: _title,
              desc: _desc})
            });
            this.setState({
              contents: newContents
		});
-	Array.from(): 배열만 가능
-	객체는 “Object.assign({ }, 복사할 객체 이름)”를 통해 복사할 수 있음: 첫 번째 인자로 빈 객체로 주고 두번째 인자로 복사할 객체
Var a = {name : ‘egoing’};
Var b = Object.assign({ }, a));
Console.log(a, b, a === b);  -> {name: “egoing”}, {name: “egoing”}, false
-	만약 var b = Object.assign({left: 1, right: 2}, a); -> {left: 1, right: 2, name: ‘egoing’} 처럼 복사된 객체의 정보가 마지막에 추가되어서 나옴
-	Immutable JS와 같은 라이브러리에서는 모든 명령어가 원본에 대해서 Immutable: 원본의 값은 그대로이고 복사본의 값의 변경

7.	Update 기능 구현: 웹 앱의 수정 기능을 React로 구현해보기
-	업데이트 기능은 Read, Create 기능이 결합되어있음: CreateContent에 이미 있는 form재사용 -> 새로 UpdateContent라는 파일 생성 후 코드 복사, App.js파일에 import, 모드가 Update로 바뀔때 실행될 코드 조건문 추가
-	이제 App.js 파일의 render함수가 너무 길어짐.. -> <article>코드를 만들어주는 코드들을 .getContent() 함수로 모아넣고 _article 시켜주기 -> {_article}을 {this.getContent()}로 변경
-	Updatecontent가 실행될 때 입력값으로, 현재 선택된 컨텐트에 해당되는 컨텐트를 업데이트 컨텐트에 주입시켜줘야함
: Contents에서 selected content와 같은 id값을 찾아서 알맞는 컨텐트가져오기 -> getReadContent() 라는 새로운 함수 만들기
Read모드에서 실행되었던 반복문 코드를 빼서 GetReadContent함수에 넣고 data를 리턴시켜줌 
getReadContent() {
    var i = 0;
      while (i < this.state.contents.length) {
        var data = this.state.contents[i]; 
        if (data.id === this.state.selected_content_id) {
          return data;
          break;
        }
        i = i + 1;
      }
  }
  getContent(){
    var _title,
      _desc,
      _article = null; //기본적으로 없는 값
    if (this.state.mode === "welcome") {
      _title = this.state.welcome.title;
      _desc = this.state.welcome.desc;
      _article = <ReadContent title={_title} desc={_desc} />; //이 영역을 가변적으로 만들기 위해 변수로 만들어 저장
    } else if (this.state.mode === "read") {
      var _content = this.getReadContent();
      _article = <ReadContent title={_content.title} desc={_content.desc} />;     }

-	업데이트 모드일때 업데이트를 시킬 데이터를 위에서 만든 getReadContent 함수를 통해 가져 오고 그 데이터를 updateContent의 data로 주입시킴 
-	else if (this.state.mode === "update") {
-	      _content = this.getReadContent();
-	      _article = (
-	        <UpdateContent data={_content} // 업데이트할 컨텐트를 선택한 후  id 값에 맞는 컨텐트를 GetReadContent함수로 가져온 것을 data로 주입시킴
-	          onSubmit={function(_title, _desc) {

7-2. Update 구현: form 
-	UpdateContent 컴포넌트로 주입된 data를 기반으로 해서 컴포넌트에 기본적으로 입력되는 값을 제어
-	공식문서: forms 참고
-	업데이트 컨텐트에 있는 form에 title의 value 값을 {this.props.data.title}로 하면 리액트에서 에러가남: 
Props의 값을 우리가 변경할 수 없고 “onChange” 함수를 쓰라고 뜸 (props의 데이터는 read-only이므로 이대로 수정 불가)
:Value값을 우리가 값을 바꿔줄 수 잇게 state화시킨 후 value={this.state.title}
class UpdateContent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      title: this.props.data.title,
	desc: this.props.data.desc
    }
  }

-	여전히 수정이 안 됨: Input의 value를 바꿨지만 이것이 state값이 바뀌지는 않으므로.. -> onChange 함수써서 Input값이 바꼈을 때 state값도 바뀌게 만들어줌 

<input
              type="text"
              name="title"
              placeholder="title"
              value={this.state.title} // props의 데이터는 read-only이므로 수정 불가:State 씀
              onChange={function(e) {
                console.log(e.target.value);
                this.setState({title:e.target.value}); // 한 글자씩 바뀔 때마다 state에 동기화시키기 
              }.bind(this)}
            />

-	똑같이 textarea도 state화시키고 value가져오게 한 후 onchange함수 등록
-	TEXtarea의 내용을 쓸때 텍스트아리아 태그 사이에 넣는것이 아니라 value값으로 넣어줘야함
<textarea
              name="desc"
              placeholder="description"
              value={this.state.desc}
              onChange={function(e) {
                console.log(e.target.value);
                this.setState({ desc: e.target.value }); 
              }.bind(this)}
            />
-	OnChange함수가 중복되서 쓰이는게 싫다.. 이런 기능을 하는 함수를 따로 만들자: inputFormHandler()
inputFormHandelr(e){
    this.setState({[e.target.name]: e.target.value });  // 증괄호 사용해서 이벤트가 일어난 타겟 가져오기  
  }

<input
              type="text"
              name="title"
              placeholder="title"
              value={this.state.title} // props의 데이터는 read-only이므로 이대로 수정 불가
              onChange={this.inputFormHandelr.bind(this)}
            />
-	InputFormHandler 쓰일 때마다 뒤에 bind(this) 붙어 있는거 보기 싫으니까 constructor에서 초기화 해준 후 코드 뒤에 붙어있는 bind(this) 떼주기
this.inputFormHandelr = this.inputFormHandelr.bind(this);

7-3. Update 구현: state 변경
-	이제 들어온 데이터를 State로 만들고 그 값을 Form과 동기화해서 state값을 변경시키는 것을 했음, 그런데 어디를 업데이트 해야할지 식별자가 필요함! 
-	Form에서 ID는 사용자한테 보일 필요가 없기때문에 type을 hidden으로 씀: 안 보이지만 자바스크립트가 동작하지 않을 때도 이 기능이 동작하게 하려는 거기 때문에 기능 구현에 충실하기 위해서.. 
<input type="hidden" name="id" value={this.state.id}></input>   // 존재하지만 눈에 보이지는 않음
-	UpdateContent에서 onSubmit 버튼이 눌릴 때 이 id값도 부여하게 하기 
<form
          action="/create_process" // 이건 지금 이해하지 말고 넘어가자
          method="post"
          onSubmit={function(e) {
            e.preventDefault();
            this.props.onSubmit(
              this.state.id,
              this.state.title, this.state.desc);
          }.bind(this)}
-	App.js, 업데이트 모드에서 이전에 복사해놓은 코드에서는 업데이트시 새로운 요소가 생성되는 코드가 복사되었으므로 필요없는 코드 삭제 및 변경: max_content_id 삭제, concat코드를 array 복제본 만들어서 수정하고자 하는 것과 같은 원소 바꾼 후 컨텐츠 변경하는 것으로 바꿈

} else if (this.state.mode === "update") {
      _content = this.getReadContent();
      _article = (
        <UpdateContent
          data={_content} 
          onSubmit={function(_id, _title, _desc) {
            var _contents = Array.from(this.state.contents);// 원본을 바꾸지 않음으로써 추후 성능개선에 효율적
            //contents값 하나씩 봐서 id값이 수정하고자 하는 것과 같은 원소 찾기
            var i = 0;
            while (i < _contents.length) {
              if (_contents[i].id === _id) {
                _contents[i] = { id: _id, title: _title, desc: _desc }; // 새로 입력받은 내용으로 바꾸기 
                break;
              }
              i = i + 1;
            }
            this.setState({
              contents: _contents,
		mode: ‘read’. // 컨텐츠 수정 후 상세보기 할 수 있도록 모드 바꾸기 
            });
-	CreateContent에서도 Concat을 썼던 코드를 새로운 복사본을 만들어서 그 복사본을 수정하는 것으로 코드 변경
_article = (
        <CreateContent
          onSubmit={function(_title, _desc) {
            // state를 통해서 새로운 컨텐츠 값을 추가하기
            this.max_content_id = this.max_content_id + 1;
            // this.state.contents.push({id: this.max_content_id, title: _title, desc: _desc});
            var _contents = Array.from(this.state.contents);
            _contents.push({
              id: this.max_content_id,
              title: _title,
              desc: _desc
            })
            this.setState({
              contents: _contents,
		mode: ‘read’
		selected_content_id: {this.max_content_id}
            });
          }.bind(this)}
        />
      );
-	이제 컨텐트를 업데이트하고 수정, 업데이트 후 바뀐 것으로 ‘상세보기’ 하려면 모드를 read로 바꿔주면 됨: Update, create 둘 다: 위의 예 코드 추가
-	Create에서 selected_content_id (read모드에서 클릭된 링크의 id값):: {this.max_content_id} // 방금 우리가 추가한 값으로 바꿈

