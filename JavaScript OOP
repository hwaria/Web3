생활코딩 – JavaScript 객체 지향 프로그래밍: 자바스크립트를 이용해서 웹브라우저 & Node.js를 제어하기

0.	수업소개
-	객체: 서로 연관된 변수와 함수를 그룹핑해서 이름을 붙인 것 
-	코드를 단순하게 만드는 도구, 자바스크립트의 객체의 특성을 깊게 살펴봄
	prototype
	__proto__
	생성자 함수와 new
	class
	상속

1.	실습준비
-	실습 파일을 저장할 디렉토리 지정, 자바스크립트파일 html파일에 연결

2.	배열과 객체
2-1. 객체의 기본
-	Object.js파일에 객체를 만들어볼 것임
-	객체와 배열의 차이를 알기 위해 둘 다 만들어보자
Var memberArray = [‘egoing’, ‘graphittie’, ‘leezhce’];
Console.log(“memberArray[1]”, memberArray[1]) -> memberArray[1] graphittie 

Var memberObject = {
	Manager: ‘egoing’,
	Developer: ‘graphittie’,
	Designer: ‘leezhce’
}
Console.log(‘memberObject.designer’, memberObject.designer); -> memberObject.desginer leezhce

: 배열에서는 값에 접근할 때 대괄호를, 객체에서는 점을 사용
객체에서도 대괄호로 값 접근하려면 memberObject[‘designer’]
: 값을 만들고 읽기를 해봤음.
-	값을 수정하고 삭제하려면?
memberObject.designer = ‘leezche’ 값 수정
delete memberObject.manager -> 값 삭제
-	요약: 객체는 이름이 있는 정보를 정리하는 도구, 객체를 읽을 때는 점이나 대괄호를 사용, 수정/삭제 방법

2-2. 객체와 반복문
-	반복문을 이용해서 객체의 모든 값에 접근하는 방법 
-	객체와 배열의 반복문 실행결과를 비교하여 보기 쉽도록 console.group(‘array loop’); console.groupEnd(‘object loop’) 코드 안에 비교문 쓰기 
var memberArray = ['egoing', 'graphittie', 'leezhce'];
console.group('array loop');
var i = 0;
while ( i < memberArray.length) {
	console.log(i, memberArray[i]);
	i += 1;
} 
console.groupEnd('array loop'); 
->array loop 
0 “egoing”
1 “graphittie”
2 “leezhce”

var memberObject = {
	manager: 'egoing',
	developer: 'graphittie',
	designer: 'leezhce'
}	

console.group('object loop');
for (var i in memberObject) {
	console.log(i);
}
console.groupEnd('object loop');  -> manager, developer, designer 키의 값이 나옴
: 원소의 값을 가져올 때는 memberObject[i] -> ‘egoing’, ‘graphittie”, ‘leezhce”

3.	객체의 사용 사례
3-1. 객체는 언제 쓰나?
-	Built-in객체의 예: Math.PI -> 파이값, Math.random() -> 임의의 수를 가져오는 함수, Math.floor(3.9) -> 3. 내림을 해주는 함수 
-	수학적인 것과 관련된 것을 “Math”라는 이름의 객체에 변수, 메소드로 저장한 것
-	우리가 객체를 따로 만들지 않아도 우리는 이때까지 이미 만들어진 객체를 사용해왔었음 

3-2. 객체만들어보기
-	MyMath라고 하는 객체 만들어보기

var MyMath = {
    PI:Math.PI,
    random:function(){
        return Math.random();
    },
    floor:function(val){
        return Math.floor(val);
    }
}
console.log("MyMath.PI", MyMath.PI);
console.log("MyMath.random()", MyMath.random());
console.log("MyMath.floor(3.9)", MyMath.floor(3.9));
-	객체를 안 써도 되지만 추후에 조금 더 불편해질 뿐. 디렉토리를 만들고 그 안에 연관된 파일을 넣으면 나중에 중복해서 이름을 쓸 가능성이 낮고 코드도 훨씬 더 깔끔해짐

4.	This: 메소드 내에서 자신이 속한 객체를 참조할 때 사용하는 키워드
-	프로그래밍에서 자기 자신을 가리키는 표현
var kim = {
	name: 'kim',
	first: 10,
	second: 20,
	sum: function(f, s) {
		return f + s;
	}
}

console.log('kim.sum(kim.first, kim.second)', kim.sum(kim.first, kim.second)); -> 
kim.sum(kim.first, kim.second) 30 
-	기능적으로는 아무 문제가 없지만, kim 객체의 메소드를 쓰면서 인자로 다시 객체의 이름을 활용해서 인자를 넘겨주는것은 비효율적임: 메소드가 자신이 속해있는 객체를 가리킬 때 “this”를 사용
var kim = {
	name: 'kim',
	first: 10,
	second: 20,
	sum: function() {
		return this.first + this.second;
	}
}
console.log('kim.sum(kim.first, kim.second)', kim.sum()); -> kim.sum(kim.first, kim.second) 30 
-	This덕분에 객체가 내부적으로 가지고 있는 상태를 함수에서 참조할 수 있음

5.	객체 공장
5-1. 
-	객체를 자동으로 찍어내는 공장 constructor을 만들어보자
-	위의 예를 활용해서 똑같은 포맷을 가진 다른 객체 “lee”를 생성
var kim = {
	name: 'kim',
	first: 10,
	second: 20,
	sum: function() {
		return this.first + this.second;
	}
}

var lee= {
	name: 'kim',
	first: 10,
	second: 10,
	sum: function() {
		return this.first + this.second;
	}
}

console.log('kim.sum()', kim.sum()); -> kim.sum() 30
console.log('lee.sum()', lee.sum()); -> lee.sum() 20

-	객체에 ‘third’라는 변수를 추가할 경우 kim, lee 등 모든 해당 객체의 값을 바꿔줘야 함.. -> 같은 형식의 객체를 만들어내는 공장을 만들어보자

5-2. 내장된 객체를 통해서 객체 공장의 쓰임 체험해보기
-	시간을 알아내고 싶을 때 사용하는 date객체 써보기
var d1 = new Date('2019-4-10'); -> 현재 날짜를 가진 새로운 객체 ‘d1’ 생성 
console.log('d1.getFullYear()', d1.getFullYear()); -> d1.getFullYear() 2019만들어진 d1객체를 사용하여 데이터 참조하기
console.log('d1.getMonth()', d1.getMonth()); -> d1.getMonth() 3
-	‘Date는 어떤 형식에 따라 객체를 리턴해줌. Date라는 객체 공장을 바꿀 경우 그 공장에서 나오는 모든 객체를 한꺼번에 변경할 수 있음 

5-3. 객체 공장 이용해보기 
-	‘Date’ 는 내장함수임 -> 우리도 위의 포맷으로 객체를 만들어주는 함수를 만들어보자
function Person(){
	this.name= 'kim',
	this.first= 10,
	this.second= 20,
	this.third= 30,
	this.sum= function() {
		return this.first + this.second + this.third;
	}
}
console.log('Person()', Person()); -> Person() undefined 
console.log('new Person()', new Person());  -> new Person() Person {name: "kim", first: 10, second: 20, third: 30, sum: ƒ}
-	New를 붙이고 우리가 만든 함수를 만들면 그 함수는 생성자가 됨(constructor, 생성자 함수)
-	New Person()을 활용해서 kim, lee 두 객체 만들기
var kim = new Person();   console.log('kim.sum()', kim.sum()); -> kim.sum() 60
var lee = new Person();   console.log('lee..sum()', lee.sum()); -> > lee..sum() 60
-	생성자함수가 입력될 때 입력값을 주기
var kim = new Person(‘kim’, 10, 20, 30); 
var lee = new Person(‘lee’, 10, 10, 10);

-	Person 생성자에서 함수의 인자로 들어온 값을 처리할 수 있도록 정의
function Person(name, first, second, third) {
	this.name= name,
	this.first= first,
	this.second= second,
	this.third= third,
	this.sum= function() {
		return this.first + this.second + this.third;
	}
}
var kim = new Person(‘kim’, 10, 20, 30); console.log('kim.sum()', kim.sum()); -> kim.sum() 60
var lee = new Person(‘lee’, 10, 10, 10); console.log('lee..sum()', lee.sum()); -> > lee..sum() 30
-	생성자 함수를 이용하면 같은 형식의 객체를 만들 때마다 하나하나 변수를 지정해줄 필요 없으며, 생성자 함수에서 값을 한번 변경함에 따라 생성자 함수를 통해 만들어진 모든 객체가 한번에 바뀜

6.	Prototype: 코드의 재사용성과 성능을 향상
6-1. prototype이 필요한 이유
-	Prototype은 자바스크립트가 prototype based language라 부르기도 할만큼 큰 기반임
-	위의 예에서 kim, lee객체를 생성할때 Person생성자를 사용했었음. 그런데 person생성자에서 sum함수는 생성자가 실행이 될 때마다 불필요하게 다시 만들어짐 -> 시간, 메모리 낭비
-	생성자 안에 메소드를 만들 경우, 객체가 만들어진 이 후에 메소드 수정이 필요할 때 각각의 객체마다 값을 변경해줘야 함 
-	Person생성자를 이용해서 만들어진 모든 객체가 공통적으로 사용할 함수, 속성을 만들면 좋겟다

6-2. prototype을 이용해서 코드의 재사용성을 높이고 성능을 향상
-	객체가 공통적으로 사용할 속성을 만드는 방법
-	생성자 함수에 존재하던 메소드 부분을 바깥으로 빼내어 Prototype으로 정의해 줌
function Person(name, first, second, third){
    this.name=name;
    this.first=first;
    this.second=second;   
}

Person.prototype.sum = function(){
    return 'prototype : '+(this.first+this.second);
}
-	이제 생성자함수가 실행될 때마다 sum함수가 실행되지 않음. 한 번만 정의됨 
-	그리고 prototype으로 정의된 sum함수의 리턴값을 바꾸면 모든 객체의 값이 동시에 바뀜
-	많은 객체 중 특정 한 객체의 sum메소드를 변경시키고 싶을 경우
Kim.sum = function () {
	Return ‘this : ‘ + (this.first + this.second); -> kim.sum() this : 30
}
-	속성(변수)들은 생성자 안에 넣고, 그리고 함수들은 생성자.prototype.함수이름으로 쓰는 것이 일반적

7.	Class: JavaScript ES6부터 포함됨
7-1. 클래스 문법에 대한 오리엔테이션
-	자바, 파이썬 등에서는 객체를 만드는 공장으로서 class를 사용
-	자바스크립트에서는 constructor function으로 객체를 사용했었음
-	Constructor function으로 이미 구현되어있는 기능에 추가하여 class를 사용
-	인터넷익스플로러 6, 10, 11(제일 최신)버전에서는 ES6 클래스를 지원하지 않음
-	91.27%의 웹브라우저에서 클래스 지원
-	“Babeljs.io” 컴파일러: 우리가 짠 코드를 옛날부터 쓰던 코드로 변환 가능함 

7-2. 클래스를 생성하고, 객체를 만드는 방법
-	위에서 생성한 prototype.js의 객체를, 클래스를 사용해서 똑같이 동작하는 객체 만들어보기
-	Prototype.js에서 Person이라고 하는 함수는 new와 함께 쓰엿을때 객체를 생성해주는 생성자로 역할
-	Constructor의 역할 하나. 객체를 만든다 둘. 객체의 초기상태를 세팅함. 클래스에서는 어떻게 할까?
-	클래스로 객체 생성하기
class Person {
}
var kim = new Person();

8.	Class constructor
-	자바스크립트의 클래스에서 생성자 함수를 구현하는 방법
-	클래스에서 메소드를 만들 때는 function이라는 키워드를 쓰지 않고 바로 함수 정의
-	객체의 초기 상태를 지정할 때 constructor라는 함수를 통해 세팅 
class Person {
	constuctor(name, first, second) {
		this.name = name;
		this.first = first;
		this.second = second;
	}
}
var kim = new Person('kim', 10, 20);
console.log('kim', kim); -> kim Person {name: ‘kim’, first: 10, second: 20}
-	객체가 생성될 때, 자동으로 생성되기전에 실행되도록 약속되어잇는 constuctor함수 구현해보았다

9.	Class에서 객체의 Method 구현하기
-	Class를 통해서 객체를 생성할 때 모든 객체가 공유하는 공통(prototype)의 객체를 생성하는 방법
-	전통적인 방법에서는 constuctor함수의 prototype으로 메소드를 정의했었음
class Person{
    constructor(name, first, second){
        this.name = name;
        this.first = first;
        this.second = second;
    }
    sum(){
        return 'prototype : '+(this.first+this.second);
    }
}
var kim = new Person('kim', 10, 20);
kim.sum = function(){
    return 'this : '+(this.first+this.second);
}
var lee = new Person('lee', 10, 10);
console.log("kim.sum()", kim.sum()); -> kim.sum() this: 30
console.log("lee.sum()", lee.sum()); -> lee sum() prototype: 20

10.	Class  상속
-	Javascript에서 클래스를 상속해서 서브 클래스를 만드는 방법
-	상속이 왜 필요한가? 위의 코드에서 메소드를 추가하고 싶을때 클래스를 복제해서 새로운 기능을 추가하면 코드의 중복을 없애면서 변경이 필요할 때도 클래스와, 자식(서브)클래스에 동시적으로 적용할 수 있어 유지보수가 쉬워짐 
class PersonPlus extends Person{ // Person의 모든 속성들을 그대로 쓸 수 있으면서 새로운 메소드 추가
	avg() {
		return (this.first+this.second) / 2; 
	}
}

Var kim = new PersonPlus(‘kim’, 10, 20);
Kim.avg() -> 

11.	Super
-	서브(자식)클래스에서 상위 클래스를 호출할 때 사용하는 키워드 
: 자녀의 class 생성자에 Property를 추가하고 싶으면 부모 class에서 상속받은 부분은 super()로 써주고, 추가하고 싶은 프로퍼티를 추가로 써줌, 또한 부모class의 메소드를 super.메소드명()로 쓰고 추가하고 싶은 기능을 써주면 됨
class Person {
	constructor(name, first, second) {
		this.name = name;
		this.first = first;
		this.second = second;
	}
	sum() {
		return this.first + this.second;
	}
}

class PersonPlus extends Person{
	constructor (name, first, second, third) {
		super(name, first, second); // 부모의 프로퍼티를 불러옴. “Super()” -> 부모클래스의 생성자 호출 
		this.third = third;
	}
	sum() {
		return super.sum() + this.third; 부모클래스의 메소드를 호출하여 리턴된 값에 새로운 기능 추가
	}
	avg() {
			return (this.first+this.second+this.third) / 3; 
	}
	
}


var kim = new PersonPlus('kim', 10, 20, 30);
console.log('kim.sum()', kim.sum());
console.log('kim.avg()', kim.avg());
-	부모 클래스를 기반으로 새로운 기능을 추가 구현한 자식 클래스를 상속받아 만들었을 때, 
super()를 통해 부모 클래스의 constructor를 호출하여 부모 클래스 초기 셋팅값을 사용할 수 있고, 
super.[메소드 이름] 을 통해 부모의 메소드를 호출하여 자식 클래스의 메소드와 콜라보를 할 수 있다. 
결국 기본적인 기능이 구현된 부모 클래스를 확장하여 사용자에게 필요한 기능을 추가한 자식 클래스를 사용하는데, 코드의 중복없이 재사용성이 좋은 코드를 만들 수 있어 사용자의 편의를 증대시키고 유지보수가 편해짐

12.	객체 간의 상속
12-1. 소개
-	객체지향 프로그래밍은 크게 두가지로 나눠짐
1)	객체를 만들어내는 공장: 클래스
2)	클래스를 통해서 만들어진 구체적인 객체
이 두가지가 어떻게 상호작용하냐에 따라 다양한 형태의 객체제어언어들이 만들어짐
-	주류 객체지향언어(자바 등)에서 자식클래스가 부모클래스의 기능을 물려받은 후 객체 생성: 객체의 기능은 클래스에서 정해지고 다른 객체의 상속을 받을 수 없음  
-	이 반면에 자바스크립트는 객체의 상속이 더 자유로움: 슈퍼 객체의 기능을 상속받으면서 추가적인 기능을 결합한 서브 객체를 생성. 객체간 직접적으로 상속이 가능하고 객체의 상속관계를 다른 객체로 바꿀 수도 있음 (prototype link를 통해) 

12-2. __proto__를 이용해서 상속을 구현하는 방법
-	객체간의 상속
var superObj = {superVal: 'super'}
var subObj = {subVal: 'sub'}
subObj.__proto__ = superObj; //subOjb는 superOjb의 자식임을 알려주는 링크
console.log('subObj.subVal =>', subObj.subVal); -> subObj.subVal => sub
console.log('subObj.superVal =>', subObj.superVal); -> subObj.superVal => super
-	Prototype (과 __proto__를 헷갈리면 안 됨.. 
-	자식객체에서 상속받은 부모속성의 값을 변경한다고 해도 부모객체의 값은 바뀌지 않음 
subObj.superVal = 'sub';
console.log('superObj.superVal =>', superObj.superVal); -> ‘Super’
-	정석의 상속 방법은 아님
12-3. Object.create를 이용해서 __proto__를 대체하는 방법 
var subObj = {subVal: 'sub'}
subObj.__proto__ = superObj;
-	위 두 줄의 코드를 표준화된 상속방법으로 바꾸기: 더 좋은 방법
Var subObj = Object.create(superObj);
subObj.subVal = ‘sub’;

12-4. 기존의 예제 상속으로 구현하기
-	아직 우리는 컨스트럭터 function을 통해 상속하는 방법은 안 배웠고 우리가 만든 객체를 상속하는 법만 배움
var kim = {
	name: 'kim',
	first: 10, second: 20,
	sum:function( ){
		return this.first + this.second
	}
}
var lee = {
	name: 'lee',
	first: 10, second: 10,
	avg: function ( ) {. // 새로운 메소드를 따로 추가 
		return (this.first + this.second) / 2;
	}
}
lee.__proto__ = kim; // 객체 상속받기 
console.log('kim.sum(): ', kim.sum()); -> 30
console.log('lee.sum(): ', lee.sum()); -> 20
console.log('lee.avg(): ', lee.avg()); -> 10

-	표준화 상속법을 통해 객체 상속
var lee = Object.create(kim);
lee.name = 'lee';
lee.first = 10;
lee.second = 10;
lee.avg = function(){
    return (this.first+this.second)/2;
}

13.	객체와 함수
-	자바스크립트에서는 다른 언어에 비해 함수의 사용도 아주 유연함: new를 붙이면 생성자함수, call, bind
13-2. call
var kim = {name: 'kim', first: 10, second: 20}
var lee = {name: 'lee', first: 10, second: 10}
function sum() { // 이 함수는 어떤 객체에 종속되어있지 않음
	return this.first + this.second; 
}

// sum(); 과 동일
sum.call(kim); // call이라는 메소드를 통해 this가 kim이 됨
console.log(sum.call(kim)); -> 30
console.log(sum.call(lee)); -> 20
-	Call메소드에 인자를 넘김으로써 독립적으로 정의된 함수를 바로 쓸 수 있음
-	Call의 첫번째 인자 값은 그 함수의 내부적 this로 정의됨, 두번째인자는 호출할 함수의 파라미터로 들어갈 값이 정의
var kim = {name:'kim', first:10, second:20}
var lee = {name:'lee', first:10, second:10}
function sum(prefix){
    return prefix+(this.first+this.second);
}
// sum();
console.log("sum.call(kim)", sum.call(kim, '=> ')); -> sum.call(kim) => 30 // 하이라이트된 부분이 파라미터(prefix)
console.log("lee.call(kim)", sum.call(lee, ': ')); -> sum.call(lee) : 20

13-3. bind
-	함수에서 내부적으로 사용할 this를 고정하는 새로운 함수를 만들어 리턴해줌
-	첫 번재 인자로는 This로 정의될 값, 두 번째 인자로는 함수의 파라미터
var kimSum = sum.bind(kim, '-> '); // sum에는 영향을 주지 않음. 새로운 함수 kimSum을 만든것
console.log('kimSum()', kimSum()); -> kimSum() -> 30
-	Call은 실행할 때 함수의 this값을 바꿔주고! Bind는 내부적으로 this의 값을 영구적으로 바꾸는 새로운 함수를 리턴

14.	Prototype vs __proto__
-	모른다고 자책하지말자: 사용할 일이 많지 않다
-	함수는 무엇인가? 함수 “function Person() {}”의 중괄호부분은 마치 조건문, 반복문의 statement처럼 보이지만 함수는 자바스크립트에서 객체임 var Person = new Function(); 과 동일 -> 따라서 함수는 프로퍼티를 가질 수 잇음
Function Person(name, first, second) {.  // 이런 함수를 정의하면, person이라고 하는 새로운 객체가 생기며
This.name = name;                  // 동시에 persons’s prototype이라는 객체가 하나 더 생김
..				    // person객체는 Prototype이라는 프로퍼티가 생기고 이것은 Person’s prototype을 가리킴
..				    // persons’s prototype 객체는 constructor라는 프로퍼티를 통해 person 객체를 가리킴
}
-	Person.prototype.sum = function (){} : persons’s prototype객체에 sum이라는 함수가 생성됨 
-	Person 함수를 통해 만들어진 kim, lee객체는 __proto__생성되고 이것은 person’s prototype을 가리킴 

15.	생성자를 통한 상속 
-	자바스크립트에는 상속의 방법이 다양함.. : 객체와 객체간 상속, Class 객체에서 상속, Constructor function을 통한 상속
-	











